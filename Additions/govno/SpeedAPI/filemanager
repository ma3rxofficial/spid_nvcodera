os.loadAPI("SpeedAPI/windows")
os.loadAPI("SpeedAPI/image")
os.loadAPI("SpeedAPI/context")
 
local mode = "open"
local workPath = ""
local workPathHistory = {}
local input = ""
 
local xSize,ySize = term.getSize()
 
local managerX = xSize-3
local managerY = ySize-1
 
local xStart = 2
local yStart = 1
local xEnd = xStart+managerX-1
local yEnd = yStart+managerY-1
 
local leftBarSize = 14
local leftBarLimit = leftBarSize-3
 
local sizeOfInputBar = 26
local startOfInputBar = xStart+3
local endOfInputBar = startOfInputBar+sizeOfInputBar-1
local sizeOfSearchBar = managerX - sizeOfInputBar - 3 - 8 - 1
local startOfSearchBar = xEnd-sizeOfSearchBar
 
local xStartOfDrawingApps = xStart+leftBarSize+1
local yStartOfDrawingApps = yStart+4
local xSizeOfAppsArea = managerX-leftBarSize
local ySizeOfAppsArea = managerY-3
local xAppSize = 6
local yAppSize = 6
local xSpaceBetweenApps = 2
local ySpaceBetweenApps = 1
local countOfAppsByX = math.floor(xSizeOfAppsArea/(xAppSize+xSpaceBetweenApps))
local countOfAppsByY = math.floor(ySizeOfAppsArea/(yAppSize+ySpaceBetweenApps))
local countOfDesktops = 1
 
local currentDesktop = 1
 
local hideFileFormat = true
 
--local main = window.create(term.native(),xStart,yStart,managerX+1,managerY+1)
 
--------------------       --------------------
 
local function clickedAtArea(x,y,sx,sy,ex,ey)
    if (x >= sx) and (x <= ex) and (y >= sy) and (y <= ey) then return true end    
    return false
end
 
local Favourites = {
        ["Root"] = "",
        ["Applications"] = "/Applications",
        ["Documents"] = "/Documents",
        ["Images"] = "/Images",
        ["rom"] = "/rom",
}
 
local function saveConfig()
        local path = "System/Filemanager/Favourites.cfg"
        local f = fs.open(path,"w")
        f.write(textutils.serialise(Favourites))
        f.close()
end
 
local function loadConfig()
        local path = "System/Filemanager/Favourites.cfg"
        if fs.exists(path) then
                local f = fs.open(path,"r")
                local text = f.readAll()
                Favourites = textutils.unserialise(text)
                f.close()
        end
end
 
local objects = {}
local function newObj(class,name,key,value)
        objects[class] = objects[class] or {}
        objects[class][name] = objects[class][name] or {}
        objects[class][name][key] = value
end
 
function drawSeparator(x1,y1,width,height,textColor,backColor,symbol)
        local string = string.rep(symbol,width)
        term.setBackgroundColor(backColor)
        term.setTextColor(textColor)
        for y=y1,(y1+height-1) do
                windows.usualText(x1,y,string)
        end
end
 
local function getFoldersList(workPath)
 
end
 
local function drawLeftBar()
        objects["Favourites"] = {}
 
        windows.square(xStart,yStart+3,leftBarSize,yEnd-3,colors.white)
 
        local y = yStart+4
        local Peripherals = peripheral.getNames()
        drawSeparator(xStart+leftBarSize-1,y-1,1,ySizeOfAppsArea,colors.lightGray,colors.white,"|")
 
        local sFavourites = 0
        for key,val in pairs(Favourites) do
                sFavourites = sFavourites + 1
        end
 
        if sFavourites > 0 then
                windows.colorText(xStart+1,y,"Places",colors.gray)
                y = y + 1
 
                for key,val in pairs(Favourites) do
                        newObj("Favourites",key,"x1",xStart)
                        newObj("Favourites",key,"x2",xStart+leftBarSize-1)
                        newObj("Favourites",key,"y1",y)
                        newObj("Favourites",key,"path",Favourites[key])
 
                        if workPath == Favourites[key] then
                                windows.square(xStart,y,leftBarSize-1,1,colors.blue)
                                windows.colorText(xStart+2,y,windows.stringLimit("end",key,leftBarLimit),colors.white)
                        else
                                windows.square(xStart,y,leftBarSize-1,1,colors.white)
                                windows.colorText(xStart+2,y,windows.stringLimit("end",key,leftBarLimit),colors.lightGray)
                        end
 
                        y = y + 1
                end
 
                y = y + 1
        end
 
        term.setBackgroundColor(colors.white)
        if #Peripherals > 0 then
                windows.colorText(xStart+1,y,"Peripherals",colors.gray)
                y = y + 1
                for i=1,#Peripherals do
                        windows.colorText(xStart+2,y,windows.stringLimit("end",Peripherals[i],leftBarLimit),colors.lightGray)
                        y = y + 1
                end
        end
end
 
local function drawTopBar()
        local posY = yStart + 1
        windows.square(xStart,yStart,managerX,3,colors.lightGray)
        windows.square(xStart+3,posY,sizeOfInputBar,1,colors.white)
        windows.colorText(xStart+3,posY,windows.stringLimit("start",input,sizeOfInputBar),colors.gray)
 
        local text = mode
        windows.colorTextWithBack(math.floor(xStart+managerX/2-#text/2-1),yStart,text,colors.white,colors.lightGray)
 
        windows.square(startOfSearchBar,posY,sizeOfSearchBar,1,colors.white)
        windows.colorText(startOfSearchBar,posY,"Search",colors.lightGray)
        newObj("windowControls","search","x1",startOfSearchBar);newObj("windowControls","search","x2",startOfSearchBar+sizeOfSearchBar-1);newObj("windowControls","search","y",posY)
       
        local colorCyka = nil
        if #workPathHistory == 0 then colorCyka = colors.lightGray else colorCyka = colors.black end
        windows.colorTextWithBack(xStart+1,posY,"<",colorCyka,colors.white)
 
        local posX = startOfSearchBar - 7
        windows.colorTextWithBack(posX,posY," "..mode.." ",colors.white,colors.lightBlue)
        newObj("windowControls","ok","x1",posX);newObj("windowControls","ok","x2",posX+5);newObj("windowControls","ok","y",posY)
end
 
local function drawWindow()
        windows.square(xStart,yStart+3,managerX,ySizeOfAppsArea,colors.white)
        drawTopBar()
        --DRAW SHADOW
        for x=(xStart+1),(xStart+managerX) do
                paintutils.drawPixel(x,yStart+managerY,colors.gray)
        end
        for y=(yStart+1),(yStart+managerY) do
                paintutils.drawPixel(xStart+managerX,y,colors.gray)
        end
end
 
------------------------------------------------------------------------------------------------------
 
local function drawKonkretnoApp(x,y,name,backColor)
        --                           
        newObj("apps",name,"x1",x)
        newObj("apps",name,"x2",x+xAppSize-1)
        newObj("apps",name,"y1",y)
        newObj("apps",name,"y2",y+yAppSize-1)
        newObj("apps",name,"fileFormat",windows.getFileFormat(name))
 
        --                
        windows.drawOSIcon(x,y,workPath,name,objects["apps"][name]["fileFormat"])
 
        --                          
        term.setBackgroundColor(backColor)
        if fs.isReadOnly(workPath.."/"..name) then
                term.setTextColor(colors.red)
        else
                term.setTextColor(colors.black)
        end
        if windows.isFileHidden(name) then
                term.setTextColor(colors.gray)
        end
        if hideFileFormat then
                name = windows.hideFileFormat(name)
        end
        name = windows.stringLimit("end",name,xAppSize,true)
        windows.usualText(math.floor(x+xAppSize/2-#name/2),y+yAppSize-1,name)
end
 
local function drawApps(x,y,currentDesktop)
 
        objects["apps"] = {}
 
        windows.square(x,y,xSizeOfAppsArea-2,ySizeOfAppsArea-2,colors.white)
 
        local fileList = fs.list(workPath)
        fileList = windows.reorganizeFilesAndFolders(workPath,fileList,true,true)
 
        countOfDesktops = math.ceil(#fileList/(countOfAppsByY*countOfAppsByX))
        local appCounter = 1 + currentDesktop * countOfAppsByY * countOfAppsByX - countOfAppsByY * countOfAppsByX
 
        for j=1,countOfAppsByY do
                for i=1,countOfAppsByX do
                        if fileList[appCounter] then
                                drawKonkretnoApp(x+i*(xAppSize+xSpaceBetweenApps)-(xAppSize+xSpaceBetweenApps),y+j*(yAppSize+ySpaceBetweenApps)-(yAppSize+ySpaceBetweenApps),fileList[appCounter],colors.white)
                                appCounter = appCounter + 1
                        else
                                break
                        end
                end
        end
end
 
------------------------------------------------------------------------------------------------------
 
local function drawManager(x,y)
 
        if x~=nil or y~=nil then
                xStart = x
                yStart = y
                xStartOfDrawingApps = xStart+leftBarSize+1
                yStartOfDrawingApps = yStart+4
        end
 
        currentDesktop = 1
        --windows.emptyWindow(xStart,yStart,managerX,managerY,fs.getName(workPath))
        drawWindow()
        --windows.colorTextWithBack(xStart,yStart,"x",colors.black,colors.red);windows.colorTextWithBack(xStart+1,yStart,"-",colors.black,colors.orange);windows.colorTextWithBack(xStart+2,yStart,"+",colors.black,colors.lime)
        drawLeftBar()
        drawApps(xStartOfDrawingApps,yStartOfDrawingApps,currentDesktop)
        windows.scrollBar(xEnd,yStart+3,managerY-3,countOfDesktops,currentDesktop,colors.lightGray,colors.lightBlue)
end
 
newObj("windowControls","<","x",xStart+1);newObj("windowControls","<","y",yStart+1)
 
local function initializeProgram(mode1)
        if mode1=="open" then mode = "Open" else mode = "Save" end
 
        loadConfig()
        saveConfig()
 
        input = "/"..workPath
        drawManager()
       
        local exit = false
        while true do
 
                local breakCycles = false
 
                if exit then break end
 
                local event,side,x,y = os.pullEvent()
                if event == "mouse_click" then
 
                        for key,val in pairs(objects["Favourites"]) do
                                if breakCycles then break end
 
                                if clickedAtArea(x,y,objects["Favourites"][key]["x1"],objects["Favourites"][key]["y1"],objects["Favourites"][key]["x2"],objects["Favourites"][key]["y1"]) then
                                       
                                        if side == 1 then
                                                if not fs.exists(objects["Favourites"][key]["path"]) then fs.makeDir(key) end
                                                workPathHistory[#workPathHistory+1] = workPath
                                                workPath = objects["Favourites"][key]["path"]
                                                input = "/"..workPath
                                                drawManager()
                                        else
                                                windows.square(xStart,objects["Favourites"][key]["y1"],leftBarSize-1,1,colors.lightGray)
                                                windows.colorText(xStart+2,objects["Favourites"][key]["y1"],windows.stringLimit("end",key,leftBarLimit),colors.white)
                                                --sleep(0.2)
 
                                                local action = context.menu(x,y,{"Remove from sidebar"})
                                                if action == "Remove from sidebar" then
 
                                                        Favourites[key] = nil
                                                        saveConfig()
 
                                                end
                                                drawManager()
                                        end
 
                                        breakCycles = true
                                        break
                                end
                        end
 
 
 
                        for key,val in pairs(objects["apps"]) do
                                if breakCycles then break end
                                if clickedAtArea(x,y,objects["apps"][key]["x1"],objects["apps"][key]["y1"],objects["apps"][key]["x2"],objects["apps"][key]["y2"]) then
                                       
                                        if side == 1 then
                                                if fs.isDir(workPath.."/"..key) and windows.getFileFormat(key) ~= ".app" then
                                                        windows.square(objects["apps"][key]["x1"]-1,objects["apps"][key]["y1"],xAppSize+2,yAppSize,colors.blue)
                                                        drawKonkretnoApp(objects["apps"][key]["x1"],objects["apps"][key]["y1"],key,colors.blue)
                                                        sleep(0.2)
                                                        workPathHistory[#workPathHistory+1] = workPath
                                                        workPath = workPath.."/"..key
                                                        input = "/"..workPath
                                                        drawManager()
                                                elseif not fs.isDir(workPath.."/"..key) and mode == "Save" then
                                                        windows.square(objects["apps"][key]["x1"]-1,objects["apps"][key]["y1"],xAppSize+2,yAppSize,colors.red)
                                                        drawKonkretnoApp(objects["apps"][key]["x1"],objects["apps"][key]["y1"],key,colors.red)
                                                        sleep(0.2)
                                                        windows.square(objects["apps"][key]["x1"]-1,objects["apps"][key]["y1"],xAppSize+2,yAppSize,colors.white)
                                                        drawKonkretnoApp(objects["apps"][key]["x1"],objects["apps"][key]["y1"],key,colors.white)
                                                elseif not fs.isDir(workPath.."/"..key) and mode ~= "Save" or fs.isDir(workPath.."/"..key) and windows.getFileFormat(key) == ".app" and mode ~= "Save" then
                                                        windows.square(objects["apps"][key]["x1"]-1,objects["apps"][key]["y1"],xAppSize+2,yAppSize,colors.blue)
                                                        drawKonkretnoApp(objects["apps"][key]["x1"],objects["apps"][key]["y1"],key,colors.blue)
                                                        sleep(0.2)
                                                        windows.square(objects["apps"][key]["x1"]-1,objects["apps"][key]["y1"],xAppSize+2,yAppSize,colors.white)
                                                        drawKonkretnoApp(objects["apps"][key]["x1"],objects["apps"][key]["y1"],key,colors.white)
                                                        input = "/"..workPath.."/"..key
                                                        drawTopBar()
                                                end
                                        else
                                                if fs.isDir(workPath.."/"..key) then
                                                        windows.square(objects["apps"][key]["x1"]-1,objects["apps"][key]["y1"],xAppSize+2,yAppSize,colors.lightGray)
                                                        drawKonkretnoApp(objects["apps"][key]["x1"],objects["apps"][key]["y1"],key,colors.lightGray)
                                               
                                                        local action = context.menu(x,y,{"Add to sidebar"})
                                                        if action == "Add to sidebar" then
 
                                                                Favourites[key] = workPath.."/"..key
                                                                saveConfig()
 
                                                        end
                                                        drawManager()
                                                end
                                        end
 
                                        breakCycles = true
                                        break
                                end    
                        end
 
                        if clickedAtArea(x,y,objects["windowControls"]["<"]["x"],objects["windowControls"]["<"]["y"],objects["windowControls"]["<"]["x"],objects["windowControls"]["<"]["y"]) then
                                if #workPathHistory > 0 then
                                        windows.colorTextWithBack(objects["windowControls"]["<"]["x"],objects["windowControls"]["<"]["y"],"<",colors.white,colors.blue)
                                        sleep(0.2)
                                        workPath = workPathHistory[#workPathHistory]
                                        input = "/"..workPath
                                        workPathHistory[#workPathHistory] = nil
                                        drawManager()
                                end
                        elseif clickedAtArea(x,y,objects["windowControls"]["ok"]["x1"],objects["windowControls"]["ok"]["y"],objects["windowControls"]["ok"]["x2"],objects["windowControls"]["ok"]["y"]) then
                                windows.colorTextWithBack(objects["windowControls"]["ok"]["x1"],objects["windowControls"]["ok"]["y"]," "..mode.." ",colors.white,colors.blue)
                                sleep(0.3)
                                return string.sub(input,2,-1)
                        elseif clickedAtArea(x,y,objects["windowControls"]["search"]["x1"],objects["windowControls"]["search"]["y"],objects["windowControls"]["search"]["x2"],objects["windowControls"]["search"]["y"]) then
                                local searchResult = windows.search(xEnd-27,yStart,28,2,"Search")
                                if searchResult ~= nil then
                                        --windows.error("="..searchResult)
                                        if fs.isDir(searchResult) then
                                                workPathHistory[#workPathHistory+1] = workPath
                                                workPath = searchResult
                                                input = "/"..workPath
                                        else
                                                workPathHistory[#workPathHistory+1] = workPath
                                                workPath = string.sub(searchResult,1,#searchResult-#fs.getName(searchResult)-1)
                                                input = "/"..workPath.."/"..fs.getName(searchResult)
                                        end
                                end
                                drawManager()
 
                        elseif clickedAtArea(x,y,startOfInputBar,yStart+1,endOfInputBar,yStart+1) and mode ~= "Open" then
 
                                local cursor = nil
 
                                input = input.."/"
                                drawTopBar()
 
                                local accept = false
 
                                while true do
 
                                        cursor = startOfInputBar+#input
                                        if cursor > startOfInputBar+sizeOfInputBar then cursor = startOfInputBar+sizeOfInputBar-1 end
                                       
                                        term.setCursorPos(cursor,yStart+1)
                                        term.setTextColor(colors.black)
                                        term.setCursorBlink(true)
 
                                        local event1,side1,x1,y1 = os.pullEvent()
                                        if event1 == "char" then
 
                                                input = input..side1
                                                drawTopBar()
                                        elseif event1 == "key" then
                                                if side1 == 28 then
                                                        windows.colorTextWithBack(objects["windowControls"]["ok"]["x1"],objects["windowControls"]["ok"]["y"]," "..mode.." ",colors.white,colors.blue)
                                                        sleep(0.3)
                                                        accept = true
                                                        break
                                                elseif side1 == 14 then
                                                        if #input > 1 then
                                                                input = string.sub(input,1,-2)
                                                                drawTopBar()
                                                        end
 
                                                end
                                        elseif event1 == "mouse_click" then
                                                if clickedAtArea(x1,y1,objects["windowControls"]["ok"]["x1"],objects["windowControls"]["ok"]["y"],objects["windowControls"]["ok"]["x2"],objects["windowControls"]["ok"]["y"]) then
                                                        accept = true
                                                        drawTopBar()
                                                else
                                                        drawTopBar()
                                                        break
                                                end
                                        end
 
                                        term.setCursorBlink(false)
                                end
 
                                term.setCursorBlink(false)
 
                                if accept then return string.sub(input,2,-1) end
 
                        end
 
                elseif event == "mouse_scroll" then
                        if clickedAtArea(x,y,xStart+leftBarSize,yStart+1,xEnd-1,yEnd) then
                                if side == 1 then
                                        currentDesktop = currentDesktop + 1
                                        if currentDesktop > countOfDesktops then
                                                currentDesktop = countOfDesktops
                                        else
                                                drawApps(xStartOfDrawingApps,yStartOfDrawingApps,currentDesktop)
                                                windows.scrollBar(xEnd,yStart+3,managerY-3,countOfDesktops,currentDesktop,colors.lightGray,colors.lightBlue)
                                        end
                                else
                                        currentDesktop = currentDesktop - 1
                                        if currentDesktop < 1 then
                                                currentDesktop = 1
                                        else
                                                drawApps(xStartOfDrawingApps,yStartOfDrawingApps,currentDesktop)
                                                windows.scrollBar(xEnd,yStart+3,managerY-3,countOfDesktops,currentDesktop,colors.lightGray,colors.lightBlue)
                                        end
                                end
                        end
                elseif event == "key" then
                        if side == 28 then
                                return string.sub(input,2,-1)
                        end
                end
        end
 
end
 
function open(cykaWorkPath)
        if cykaWorkPath then workPath = cykaWorkPath end
 
        for i=(1-managerY),1,2 do
                drawManager(2,i)
                sleep(0)
        end
 
        return initializeProgram("open")
end
 
function save(cykaWorkPath)
        if cykaWorkPath then workPath = cykaWorkPath end
 
        for i=(1-managerY),1,2 do
                drawManager(2,i)
                sleep(0)
        end
 
        return initializeProgram("save")
end
 
-------------------------------------
 
--[[windows.clearScreen(colors.black)
 
local path = open("")
 
term.setTextColor(colors.white)
windows.clearScreen(colors.black)
if path == "" then
        windows.usualText(2,2,"NIL!!")
else
        windows.usualText(2,2,"Path="..path)
end]]